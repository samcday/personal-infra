import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a Hetzner Cloud Reverse DNS Entry to create, modify and reset reverse dns entries for Hetzner Cloud Floating IPs or servers.
 *
 * ## Example Usage
 *
 * For servers:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const node1 = new hcloud.Server("node1", {
 *     image: "debian-9",
 *     serverType: "cx11",
 * });
 * const master = new hcloud.Rdns("master", {
 *     serverId: node1.id,
 *     ipAddress: node1.ipv4Address,
 *     dnsPtr: "example.com",
 * });
 * ```
 *
 * For Floating IPs:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const floating1 = new hcloud.FloatingIp("floating1", {
 *     homeLocation: "nbg1",
 *     type: "ipv4",
 * });
 * const floatingMaster = new hcloud.Rdns("floating_master", {
 *     dnsPtr: "example.com",
 *     floatingIpId: floating1.id.apply(id => Number.parseFloat(id)),
 *     ipAddress: floating1.ipAddress,
 * });
 * ```
 *
 * ## Import
 *
 * Reverse DNS entries can be imported using a compound ID with the following format`<prefix (s for server/ f for floating ip)>-<server or floating ip ID>-<IP address>` # import reverse dns entry on server with id 123, ip 192.168.100.1
 *
 * ```sh
 *  $ pulumi import hcloud:index/rdns:Rdns myrdns s-123-192.168.100.1
 * ```
 *
 * # import reverse dns entry on floating ip with id 123, ip 2001:db8::1
 *
 * ```sh
 *  $ pulumi import hcloud:index/rdns:Rdns myrdns f-123-2001:db8::1
 * ```
 */
export declare class Rdns extends pulumi.CustomResource {
    /**
     * Get an existing Rdns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdnsState, opts?: pulumi.CustomResourceOptions): Rdns;
    /**
     * Returns true if the given object is an instance of Rdns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Rdns;
    /**
     * The DNS address the `ipAddress` should resolve to.
     */
    readonly dnsPtr: pulumi.Output<string>;
    /**
     * The Floating IP the `ipAddress` belongs to. Specify only one of `serverId`and `floatingIpId`.
     */
    readonly floatingIpId: pulumi.Output<number | undefined>;
    /**
     * The IP address that should point to `dnsPtr`.
     */
    readonly ipAddress: pulumi.Output<string>;
    /**
     * The server the `ipAddress` belongs to. Specify only one of `serverId`and `floatingIpId`.
     */
    readonly serverId: pulumi.Output<number | undefined>;
    /**
     * Create a Rdns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdnsArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Rdns resources.
 */
export interface RdnsState {
    /**
     * The DNS address the `ipAddress` should resolve to.
     */
    readonly dnsPtr?: pulumi.Input<string>;
    /**
     * The Floating IP the `ipAddress` belongs to. Specify only one of `serverId`and `floatingIpId`.
     */
    readonly floatingIpId?: pulumi.Input<number>;
    /**
     * The IP address that should point to `dnsPtr`.
     */
    readonly ipAddress?: pulumi.Input<string>;
    /**
     * The server the `ipAddress` belongs to. Specify only one of `serverId`and `floatingIpId`.
     */
    readonly serverId?: pulumi.Input<number>;
}
/**
 * The set of arguments for constructing a Rdns resource.
 */
export interface RdnsArgs {
    /**
     * The DNS address the `ipAddress` should resolve to.
     */
    readonly dnsPtr: pulumi.Input<string>;
    /**
     * The Floating IP the `ipAddress` belongs to. Specify only one of `serverId`and `floatingIpId`.
     */
    readonly floatingIpId?: pulumi.Input<number>;
    /**
     * The IP address that should point to `dnsPtr`.
     */
    readonly ipAddress: pulumi.Input<string>;
    /**
     * The server the `ipAddress` belongs to. Specify only one of `serverId`and `floatingIpId`.
     */
    readonly serverId?: pulumi.Input<number>;
}
