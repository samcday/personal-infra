import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
/**
 * Define services for Hetzner Cloud Load Balancers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const loadBalancer = new hcloud.LoadBalancer("loadBalancer", {
 *     loadBalancerType: "lb11",
 *     location: "nbg1",
 * });
 * const loadBalancerService = new hcloud.LoadBalancerService("loadBalancerService", {
 *     loadBalancerId: hcloud_load_balancer.test_load_balancer.id,
 *     protocol: "http",
 * });
 * ```
 *
 * ## Import
 *
 * Load Balancer Service entries can be imported using a compound ID with the following format`<load-balancer-id>__<listen-port>`
 *
 * ```sh
 *  $ pulumi import hcloud:index/loadBalancerService:LoadBalancerService myloadbalancernetwork 123__80
 * ```
 */
export declare class LoadBalancerService extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerServiceState, opts?: pulumi.CustomResourceOptions): LoadBalancerService;
    /**
     * Returns true if the given object is an instance of LoadBalancerService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LoadBalancerService;
    /**
     * Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.
     */
    readonly destinationPort: pulumi.Output<number>;
    /**
     * List of health check configurations when `protocol` is `http` or `https`.
     */
    readonly healthCheck: pulumi.Output<outputs.LoadBalancerServiceHealthCheck>;
    /**
     * List of http configurations when `protocol` is `http` or `https`.
     */
    readonly http: pulumi.Output<outputs.LoadBalancerServiceHttp>;
    /**
     * Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
     */
    readonly listenPort: pulumi.Output<number>;
    /**
     * Id of the load balancer this service belongs to.
     */
    readonly loadBalancerId: pulumi.Output<string>;
    /**
     * Protocol of the service. `http`, `https` or `tcp`
     */
    readonly protocol: pulumi.Output<string>;
    /**
     * Enable proxyprotocol.
     */
    readonly proxyprotocol: pulumi.Output<boolean>;
    /**
     * Create a LoadBalancerService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerServiceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering LoadBalancerService resources.
 */
export interface LoadBalancerServiceState {
    /**
     * Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.
     */
    readonly destinationPort?: pulumi.Input<number>;
    /**
     * List of health check configurations when `protocol` is `http` or `https`.
     */
    readonly healthCheck?: pulumi.Input<inputs.LoadBalancerServiceHealthCheck>;
    /**
     * List of http configurations when `protocol` is `http` or `https`.
     */
    readonly http?: pulumi.Input<inputs.LoadBalancerServiceHttp>;
    /**
     * Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
     */
    readonly listenPort?: pulumi.Input<number>;
    /**
     * Id of the load balancer this service belongs to.
     */
    readonly loadBalancerId?: pulumi.Input<string>;
    /**
     * Protocol of the service. `http`, `https` or `tcp`
     */
    readonly protocol?: pulumi.Input<string>;
    /**
     * Enable proxyprotocol.
     */
    readonly proxyprotocol?: pulumi.Input<boolean>;
}
/**
 * The set of arguments for constructing a LoadBalancerService resource.
 */
export interface LoadBalancerServiceArgs {
    /**
     * Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.
     */
    readonly destinationPort?: pulumi.Input<number>;
    /**
     * List of health check configurations when `protocol` is `http` or `https`.
     */
    readonly healthCheck?: pulumi.Input<inputs.LoadBalancerServiceHealthCheck>;
    /**
     * List of http configurations when `protocol` is `http` or `https`.
     */
    readonly http?: pulumi.Input<inputs.LoadBalancerServiceHttp>;
    /**
     * Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
     */
    readonly listenPort?: pulumi.Input<number>;
    /**
     * Id of the load balancer this service belongs to.
     */
    readonly loadBalancerId: pulumi.Input<string>;
    /**
     * Protocol of the service. `http`, `https` or `tcp`
     */
    readonly protocol: pulumi.Input<string>;
    /**
     * Enable proxyprotocol.
     */
    readonly proxyprotocol?: pulumi.Input<boolean>;
}
