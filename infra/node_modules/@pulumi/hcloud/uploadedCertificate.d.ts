import * as pulumi from "@pulumi/pulumi";
/**
 * Upload a TLS certificate to Hetzner Cloud.
 *
 * ## Import
 *
 * Uploaded certificates can be imported using their `id`hcl
 *
 * ```sh
 *  $ pulumi import hcloud:index/uploadedCertificate:UploadedCertificate sample_certificate <id>
 * ```
 */
export declare class UploadedCertificate extends pulumi.CustomResource {
    /**
     * Get an existing UploadedCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UploadedCertificateState, opts?: pulumi.CustomResourceOptions): UploadedCertificate;
    /**
     * Returns true if the given object is an instance of UploadedCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is UploadedCertificate;
    /**
     * PEM encoded TLS certificate.
     */
    readonly certificate: pulumi.Output<string>;
    /**
     * (string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).
     */
    readonly created: pulumi.Output<string>;
    /**
     * (list) Domains and subdomains covered by the certificate.
     */
    readonly domainNames: pulumi.Output<string[]>;
    /**
     * (string) Fingerprint of the certificate.
     */
    readonly fingerprint: pulumi.Output<string>;
    /**
     * User-defined labels (key-value pairs) the
     * certificate should be created with.
     */
    readonly labels: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * Name of the Certificate.
     */
    readonly name: pulumi.Output<string>;
    /**
     * (string) Point in time when the Certificate stops being valid (in ISO-8601 format).
     */
    readonly notValidAfter: pulumi.Output<string>;
    /**
     * (string) Point in time when the Certificate becomes valid (in ISO-8601 format).
     */
    readonly notValidBefore: pulumi.Output<string>;
    /**
     * PEM encoded private key belonging to the certificate.
     */
    readonly privateKey: pulumi.Output<string>;
    readonly type: pulumi.Output<string>;
    /**
     * Create a UploadedCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UploadedCertificateArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering UploadedCertificate resources.
 */
export interface UploadedCertificateState {
    /**
     * PEM encoded TLS certificate.
     */
    readonly certificate?: pulumi.Input<string>;
    /**
     * (string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).
     */
    readonly created?: pulumi.Input<string>;
    /**
     * (list) Domains and subdomains covered by the certificate.
     */
    readonly domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (string) Fingerprint of the certificate.
     */
    readonly fingerprint?: pulumi.Input<string>;
    /**
     * User-defined labels (key-value pairs) the
     * certificate should be created with.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Name of the Certificate.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * (string) Point in time when the Certificate stops being valid (in ISO-8601 format).
     */
    readonly notValidAfter?: pulumi.Input<string>;
    /**
     * (string) Point in time when the Certificate becomes valid (in ISO-8601 format).
     */
    readonly notValidBefore?: pulumi.Input<string>;
    /**
     * PEM encoded private key belonging to the certificate.
     */
    readonly privateKey?: pulumi.Input<string>;
    readonly type?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a UploadedCertificate resource.
 */
export interface UploadedCertificateArgs {
    /**
     * PEM encoded TLS certificate.
     */
    readonly certificate: pulumi.Input<string>;
    /**
     * User-defined labels (key-value pairs) the
     * certificate should be created with.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Name of the Certificate.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * PEM encoded private key belonging to the certificate.
     */
    readonly privateKey: pulumi.Input<string>;
}
