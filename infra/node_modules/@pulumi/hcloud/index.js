"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
// Export members:
__export(require("./certificate"));
__export(require("./firewall"));
__export(require("./floatingIp"));
__export(require("./floatingIpAssignment"));
__export(require("./getCertificate"));
__export(require("./getDatacenter"));
__export(require("./getDatacenters"));
__export(require("./getFirewall"));
__export(require("./getFloatingIp"));
__export(require("./getImage"));
__export(require("./getLoadBalancer"));
__export(require("./getLocation"));
__export(require("./getLocations"));
__export(require("./getNetwork"));
__export(require("./getServer"));
__export(require("./getServerType"));
__export(require("./getServerTypes"));
__export(require("./getSshKey"));
__export(require("./getSshKeys"));
__export(require("./getVolume"));
__export(require("./loadBalancer"));
__export(require("./loadBalancerNetwork"));
__export(require("./loadBalancerService"));
__export(require("./loadBalancerTarget"));
__export(require("./managedCertificate"));
__export(require("./network"));
__export(require("./networkRoute"));
__export(require("./networkSubnet"));
__export(require("./provider"));
__export(require("./rdns"));
__export(require("./server"));
__export(require("./serverNetwork"));
__export(require("./snapshot"));
__export(require("./sshKey"));
__export(require("./uploadedCertificate"));
__export(require("./volume"));
__export(require("./volumeAttachment"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
// Import resources to register:
const certificate_1 = require("./certificate");
const firewall_1 = require("./firewall");
const floatingIp_1 = require("./floatingIp");
const floatingIpAssignment_1 = require("./floatingIpAssignment");
const loadBalancer_1 = require("./loadBalancer");
const loadBalancerNetwork_1 = require("./loadBalancerNetwork");
const loadBalancerService_1 = require("./loadBalancerService");
const loadBalancerTarget_1 = require("./loadBalancerTarget");
const managedCertificate_1 = require("./managedCertificate");
const network_1 = require("./network");
const networkRoute_1 = require("./networkRoute");
const networkSubnet_1 = require("./networkSubnet");
const rdns_1 = require("./rdns");
const server_1 = require("./server");
const serverNetwork_1 = require("./serverNetwork");
const snapshot_1 = require("./snapshot");
const sshKey_1 = require("./sshKey");
const uploadedCertificate_1 = require("./uploadedCertificate");
const volume_1 = require("./volume");
const volumeAttachment_1 = require("./volumeAttachment");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "hcloud:index/certificate:Certificate":
                return new certificate_1.Certificate(name, undefined, { urn });
            case "hcloud:index/firewall:Firewall":
                return new firewall_1.Firewall(name, undefined, { urn });
            case "hcloud:index/floatingIp:FloatingIp":
                return new floatingIp_1.FloatingIp(name, undefined, { urn });
            case "hcloud:index/floatingIpAssignment:FloatingIpAssignment":
                return new floatingIpAssignment_1.FloatingIpAssignment(name, undefined, { urn });
            case "hcloud:index/loadBalancer:LoadBalancer":
                return new loadBalancer_1.LoadBalancer(name, undefined, { urn });
            case "hcloud:index/loadBalancerNetwork:LoadBalancerNetwork":
                return new loadBalancerNetwork_1.LoadBalancerNetwork(name, undefined, { urn });
            case "hcloud:index/loadBalancerService:LoadBalancerService":
                return new loadBalancerService_1.LoadBalancerService(name, undefined, { urn });
            case "hcloud:index/loadBalancerTarget:LoadBalancerTarget":
                return new loadBalancerTarget_1.LoadBalancerTarget(name, undefined, { urn });
            case "hcloud:index/managedCertificate:ManagedCertificate":
                return new managedCertificate_1.ManagedCertificate(name, undefined, { urn });
            case "hcloud:index/network:Network":
                return new network_1.Network(name, undefined, { urn });
            case "hcloud:index/networkRoute:NetworkRoute":
                return new networkRoute_1.NetworkRoute(name, undefined, { urn });
            case "hcloud:index/networkSubnet:NetworkSubnet":
                return new networkSubnet_1.NetworkSubnet(name, undefined, { urn });
            case "hcloud:index/rdns:Rdns":
                return new rdns_1.Rdns(name, undefined, { urn });
            case "hcloud:index/server:Server":
                return new server_1.Server(name, undefined, { urn });
            case "hcloud:index/serverNetwork:ServerNetwork":
                return new serverNetwork_1.ServerNetwork(name, undefined, { urn });
            case "hcloud:index/snapshot:Snapshot":
                return new snapshot_1.Snapshot(name, undefined, { urn });
            case "hcloud:index/sshKey:SshKey":
                return new sshKey_1.SshKey(name, undefined, { urn });
            case "hcloud:index/uploadedCertificate:UploadedCertificate":
                return new uploadedCertificate_1.UploadedCertificate(name, undefined, { urn });
            case "hcloud:index/volume:Volume":
                return new volume_1.Volume(name, undefined, { urn });
            case "hcloud:index/volumeAttachment:VolumeAttachment":
                return new volumeAttachment_1.VolumeAttachment(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("hcloud", "index/certificate", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/firewall", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/floatingIp", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/floatingIpAssignment", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/loadBalancer", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/loadBalancerNetwork", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/loadBalancerService", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/loadBalancerTarget", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/managedCertificate", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/network", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/networkRoute", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/networkSubnet", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/rdns", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/server", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/serverNetwork", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/snapshot", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/sshKey", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/uploadedCertificate", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/volume", _module);
pulumi.runtime.registerResourceModule("hcloud", "index/volumeAttachment", _module);
const provider_1 = require("./provider");
pulumi.runtime.registerResourcePackage("hcloud", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:hcloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map