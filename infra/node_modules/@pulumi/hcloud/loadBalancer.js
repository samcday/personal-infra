"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Hetzner Cloud Load Balancer to represent a Load Balancer in the Hetzner Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const myserver = new hcloud.Server("myserver", {
 *     serverType: "cx11",
 *     image: "ubuntu-18.04",
 * });
 * const loadBalancer = new hcloud.LoadBalancer("loadBalancer", {
 *     loadBalancerType: "lb11",
 *     location: "nbg1",
 *     targets: [{
 *         type: "server",
 *         serverId: myserver.id,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Load Balancers can be imported using its `id`
 *
 * ```sh
 *  $ pulumi import hcloud:index/loadBalancer:LoadBalancer my_load_balancer <id>
 * ```
 */
class LoadBalancer extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["algorithm"] = state ? state.algorithm : undefined;
            inputs["ipv4"] = state ? state.ipv4 : undefined;
            inputs["ipv6"] = state ? state.ipv6 : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["loadBalancerType"] = state ? state.loadBalancerType : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["networkIp"] = state ? state.networkIp : undefined;
            inputs["networkZone"] = state ? state.networkZone : undefined;
            inputs["targets"] = state ? state.targets : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.loadBalancerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerType'");
            }
            inputs["algorithm"] = args ? args.algorithm : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["loadBalancerType"] = args ? args.loadBalancerType : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkZone"] = args ? args.networkZone : undefined;
            inputs["targets"] = args ? args.targets : undefined;
            inputs["ipv4"] = undefined /*out*/;
            inputs["ipv6"] = undefined /*out*/;
            inputs["networkId"] = undefined /*out*/;
            inputs["networkIp"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(LoadBalancer.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LoadBalancer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }
}
exports.LoadBalancer = LoadBalancer;
/** @internal */
LoadBalancer.__pulumiType = 'hcloud:index/loadBalancer:LoadBalancer';
//# sourceMappingURL=loadBalancer.js.map