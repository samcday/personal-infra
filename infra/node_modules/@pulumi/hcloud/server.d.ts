import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
/**
 * ## Import
 *
 * Servers can be imported using the server `id`
 *
 * ```sh
 *  $ pulumi import hcloud:index/server:Server myserver <id>
 * ```
 */
export declare class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server;
    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Server;
    /**
     * (string) The backup window of the server, if enabled.
     *
     * @deprecated You should remove this property from your terraform configuration.
     */
    readonly backupWindow: pulumi.Output<string>;
    /**
     * Enable or disable backups.
     */
    readonly backups: pulumi.Output<boolean | undefined>;
    /**
     * The datacenter name to create the server in.
     */
    readonly datacenter: pulumi.Output<string>;
    /**
     * Firewall IDs the server should be attached to on creation.
     */
    readonly firewallIds: pulumi.Output<number[] | undefined>;
    /**
     * Name or ID of the image the server is created from.
     */
    readonly image: pulumi.Output<string>;
    /**
     * (string) The IPv4 address.
     */
    readonly ipv4Address: pulumi.Output<string>;
    /**
     * (string) The first IPv6 address of the assigned network.
     */
    readonly ipv6Address: pulumi.Output<string>;
    /**
     * (string) The IPv6 network.
     */
    readonly ipv6Network: pulumi.Output<string>;
    /**
     * ID or Name of an ISO image to mount.
     */
    readonly iso: pulumi.Output<string | undefined>;
    /**
     * If true, do not upgrade the disk. This allows downgrading the server type later.
     */
    readonly keepDisk: pulumi.Output<boolean | undefined>;
    /**
     * User-defined labels (key-value pairs) should be created with.
     */
    readonly labels: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * The location name to create the server in. `nbg1`, `fsn1` or `hel1`
     */
    readonly location: pulumi.Output<string>;
    /**
     * Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).
     */
    readonly name: pulumi.Output<string>;
    /**
     * Network the server should be attached to on creation. (Can be specified multiple times)
     */
    readonly networks: pulumi.Output<outputs.ServerNetwork[] | undefined>;
    /**
     * Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` `linux32` or `freebsd64`
     */
    readonly rescue: pulumi.Output<string | undefined>;
    /**
     * Name of the server type this server should be created with.
     */
    readonly serverType: pulumi.Output<string>;
    /**
     * SSH key IDs or names which should be injected into the server at creation time
     */
    readonly sshKeys: pulumi.Output<string[] | undefined>;
    /**
     * (string) The status of the server.
     */
    readonly status: pulumi.Output<string>;
    /**
     * Cloud-Init user data to use during server creation
     */
    readonly userData: pulumi.Output<string | undefined>;
    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * (string) The backup window of the server, if enabled.
     *
     * @deprecated You should remove this property from your terraform configuration.
     */
    readonly backupWindow?: pulumi.Input<string>;
    /**
     * Enable or disable backups.
     */
    readonly backups?: pulumi.Input<boolean>;
    /**
     * The datacenter name to create the server in.
     */
    readonly datacenter?: pulumi.Input<string>;
    /**
     * Firewall IDs the server should be attached to on creation.
     */
    readonly firewallIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Name or ID of the image the server is created from.
     */
    readonly image?: pulumi.Input<string>;
    /**
     * (string) The IPv4 address.
     */
    readonly ipv4Address?: pulumi.Input<string>;
    /**
     * (string) The first IPv6 address of the assigned network.
     */
    readonly ipv6Address?: pulumi.Input<string>;
    /**
     * (string) The IPv6 network.
     */
    readonly ipv6Network?: pulumi.Input<string>;
    /**
     * ID or Name of an ISO image to mount.
     */
    readonly iso?: pulumi.Input<string>;
    /**
     * If true, do not upgrade the disk. This allows downgrading the server type later.
     */
    readonly keepDisk?: pulumi.Input<boolean>;
    /**
     * User-defined labels (key-value pairs) should be created with.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * The location name to create the server in. `nbg1`, `fsn1` or `hel1`
     */
    readonly location?: pulumi.Input<string>;
    /**
     * Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Network the server should be attached to on creation. (Can be specified multiple times)
     */
    readonly networks?: pulumi.Input<pulumi.Input<inputs.ServerNetwork>[]>;
    /**
     * Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` `linux32` or `freebsd64`
     */
    readonly rescue?: pulumi.Input<string>;
    /**
     * Name of the server type this server should be created with.
     */
    readonly serverType?: pulumi.Input<string>;
    /**
     * SSH key IDs or names which should be injected into the server at creation time
     */
    readonly sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (string) The status of the server.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * Cloud-Init user data to use during server creation
     */
    readonly userData?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * Enable or disable backups.
     */
    readonly backups?: pulumi.Input<boolean>;
    /**
     * The datacenter name to create the server in.
     */
    readonly datacenter?: pulumi.Input<string>;
    /**
     * Firewall IDs the server should be attached to on creation.
     */
    readonly firewallIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Name or ID of the image the server is created from.
     */
    readonly image: pulumi.Input<string>;
    /**
     * ID or Name of an ISO image to mount.
     */
    readonly iso?: pulumi.Input<string>;
    /**
     * If true, do not upgrade the disk. This allows downgrading the server type later.
     */
    readonly keepDisk?: pulumi.Input<boolean>;
    /**
     * User-defined labels (key-value pairs) should be created with.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * The location name to create the server in. `nbg1`, `fsn1` or `hel1`
     */
    readonly location?: pulumi.Input<string>;
    /**
     * Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Network the server should be attached to on creation. (Can be specified multiple times)
     */
    readonly networks?: pulumi.Input<pulumi.Input<inputs.ServerNetwork>[]>;
    /**
     * Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` `linux32` or `freebsd64`
     */
    readonly rescue?: pulumi.Input<string>;
    /**
     * Name of the server type this server should be created with.
     */
    readonly serverType: pulumi.Input<string>;
    /**
     * SSH key IDs or names which should be injected into the server at creation time
     */
    readonly sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud-Init user data to use during server creation
     */
    readonly userData?: pulumi.Input<string>;
}
