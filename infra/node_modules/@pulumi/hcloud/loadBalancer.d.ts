import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
/**
 * Provides a Hetzner Cloud Load Balancer to represent a Load Balancer in the Hetzner Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const myserver = new hcloud.Server("myserver", {
 *     serverType: "cx11",
 *     image: "ubuntu-18.04",
 * });
 * const loadBalancer = new hcloud.LoadBalancer("loadBalancer", {
 *     loadBalancerType: "lb11",
 *     location: "nbg1",
 *     targets: [{
 *         type: "server",
 *         serverId: myserver.id,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Load Balancers can be imported using its `id`
 *
 * ```sh
 *  $ pulumi import hcloud:index/loadBalancer:LoadBalancer my_load_balancer <id>
 * ```
 */
export declare class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerState, opts?: pulumi.CustomResourceOptions): LoadBalancer;
    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LoadBalancer;
    /**
     * Configuration of the algorithm the Load Balancer use.
     */
    readonly algorithm: pulumi.Output<outputs.LoadBalancerAlgorithm>;
    /**
     * (string) IPv4 Address of the Load Balancer.
     */
    readonly ipv4: pulumi.Output<string>;
    /**
     * (string) IPv4 Address of the Load Balancer.
     */
    readonly ipv6: pulumi.Output<string>;
    /**
     * User-defined labels (key-value pairs) should be created with.
     */
    readonly labels: pulumi.Output<{
        [key: string]: any;
    }>;
    /**
     * Type of the Load Balancer.
     */
    readonly loadBalancerType: pulumi.Output<string>;
    /**
     * Location of the Load Balancer. Require when no networkZone is set.
     */
    readonly location: pulumi.Output<string>;
    /**
     * Name of the Load Balancer.
     */
    readonly name: pulumi.Output<string>;
    readonly networkId: pulumi.Output<number>;
    readonly networkIp: pulumi.Output<string>;
    /**
     * Network Zone of the Load Balancer. Require when no location is set.
     */
    readonly networkZone: pulumi.Output<string>;
    /**
     * List of targets of the Load Balancer.
     */
    readonly targets: pulumi.Output<outputs.LoadBalancerTarget[]>;
    /**
     * Create a LoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering LoadBalancer resources.
 */
export interface LoadBalancerState {
    /**
     * Configuration of the algorithm the Load Balancer use.
     */
    readonly algorithm?: pulumi.Input<inputs.LoadBalancerAlgorithm>;
    /**
     * (string) IPv4 Address of the Load Balancer.
     */
    readonly ipv4?: pulumi.Input<string>;
    /**
     * (string) IPv4 Address of the Load Balancer.
     */
    readonly ipv6?: pulumi.Input<string>;
    /**
     * User-defined labels (key-value pairs) should be created with.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Type of the Load Balancer.
     */
    readonly loadBalancerType?: pulumi.Input<string>;
    /**
     * Location of the Load Balancer. Require when no networkZone is set.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * Name of the Load Balancer.
     */
    readonly name?: pulumi.Input<string>;
    readonly networkId?: pulumi.Input<number>;
    readonly networkIp?: pulumi.Input<string>;
    /**
     * Network Zone of the Load Balancer. Require when no location is set.
     */
    readonly networkZone?: pulumi.Input<string>;
    /**
     * List of targets of the Load Balancer.
     */
    readonly targets?: pulumi.Input<pulumi.Input<inputs.LoadBalancerTarget>[]>;
}
/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    /**
     * Configuration of the algorithm the Load Balancer use.
     */
    readonly algorithm?: pulumi.Input<inputs.LoadBalancerAlgorithm>;
    /**
     * User-defined labels (key-value pairs) should be created with.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Type of the Load Balancer.
     */
    readonly loadBalancerType: pulumi.Input<string>;
    /**
     * Location of the Load Balancer. Require when no networkZone is set.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * Name of the Load Balancer.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Network Zone of the Load Balancer. Require when no location is set.
     */
    readonly networkZone?: pulumi.Input<string>;
    /**
     * List of targets of the Load Balancer.
     */
    readonly targets?: pulumi.Input<pulumi.Input<inputs.LoadBalancerTarget>[]>;
}
