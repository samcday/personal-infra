"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides details about a Hetzner Cloud Floating IP.
 *
 * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
 *
 * ## Example Usage
 *
 * # Data Source: hcloud.FloatingIp
 * Provides details about a Hetzner Cloud Floating IP.
 * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
 * ### Additional Examples
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const ip1 = hcloud.getFloatingIp({
 *     ipAddress: "1.2.3.4",
 * });
 * const ip2 = hcloud.getFloatingIp({
 *     withSelector: "key=value",
 * });
 * const main: hcloud.FloatingIpAssignment[];
 * for (const range = {value: 0}; range.value < _var.counter; range.value++) {
 *     main.push(new hcloud.FloatingIpAssignment(`main-${range.value}`, {
 *         floatingIpId: ip1.then(ip1 => ip1.id),
 *         serverId: hcloud_server.main.id,
 *     }));
 * }
 * ```
 */
function getFloatingIp(args, opts) {
    args = args || {};
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("hcloud:index/getFloatingIp:getFloatingIp", {
        "id": args.id,
        "ipAddress": args.ipAddress,
        "name": args.name,
        "selector": args.selector,
        "withSelector": args.withSelector,
    }, opts);
}
exports.getFloatingIp = getFloatingIp;
//# sourceMappingURL=getFloatingIp.js.map