"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Hetzner Cloud Reverse DNS Entry to create, modify and reset reverse dns entries for Hetzner Cloud Floating IPs or servers.
 *
 * ## Example Usage
 *
 * For servers:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const node1 = new hcloud.Server("node1", {
 *     image: "debian-9",
 *     serverType: "cx11",
 * });
 * const master = new hcloud.Rdns("master", {
 *     serverId: node1.id,
 *     ipAddress: node1.ipv4Address,
 *     dnsPtr: "example.com",
 * });
 * ```
 *
 * For Floating IPs:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const floating1 = new hcloud.FloatingIp("floating1", {
 *     homeLocation: "nbg1",
 *     type: "ipv4",
 * });
 * const floatingMaster = new hcloud.Rdns("floating_master", {
 *     dnsPtr: "example.com",
 *     floatingIpId: floating1.id.apply(id => Number.parseFloat(id)),
 *     ipAddress: floating1.ipAddress,
 * });
 * ```
 *
 * ## Import
 *
 * Reverse DNS entries can be imported using a compound ID with the following format`<prefix (s for server/ f for floating ip)>-<server or floating ip ID>-<IP address>` # import reverse dns entry on server with id 123, ip 192.168.100.1
 *
 * ```sh
 *  $ pulumi import hcloud:index/rdns:Rdns myrdns s-123-192.168.100.1
 * ```
 *
 * # import reverse dns entry on floating ip with id 123, ip 2001:db8::1
 *
 * ```sh
 *  $ pulumi import hcloud:index/rdns:Rdns myrdns f-123-2001:db8::1
 * ```
 */
class Rdns extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["dnsPtr"] = state ? state.dnsPtr : undefined;
            inputs["floatingIpId"] = state ? state.floatingIpId : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["serverId"] = state ? state.serverId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dnsPtr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsPtr'");
            }
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            inputs["dnsPtr"] = args ? args.dnsPtr : undefined;
            inputs["floatingIpId"] = args ? args.floatingIpId : undefined;
            inputs["ipAddress"] = args ? args.ipAddress : undefined;
            inputs["serverId"] = args ? args.serverId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Rdns.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Rdns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Rdns(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Rdns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rdns.__pulumiType;
    }
}
exports.Rdns = Rdns;
/** @internal */
Rdns.__pulumiType = 'hcloud:index/rdns:Rdns';
//# sourceMappingURL=rdns.js.map