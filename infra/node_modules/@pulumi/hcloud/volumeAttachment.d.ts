import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a Hetzner Cloud Volume attachment to attach a Volume to a Hetzner Cloud Server. Deleting a Volume Attachment will detach the Volume from the Server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const node1 = new hcloud.Server("node1", {
 *     image: "debian-9",
 *     serverType: "cx11",
 *     datacenter: "nbg1-dc3",
 * });
 * const master = new hcloud.Volume("master", {
 *     location: "nbg1",
 *     size: 10,
 * });
 * const main = new hcloud.VolumeAttachment("main", {
 *     volumeId: master.id,
 *     serverId: node1.id,
 *     automount: true,
 * });
 * ```
 *
 * ## Import
 *
 * Volume Attachments can be imported using the `volume_id`
 *
 * ```sh
 *  $ pulumi import hcloud:index/volumeAttachment:VolumeAttachment myvolumeattachment <volume_id>
 * ```
 */
export declare class VolumeAttachment extends pulumi.CustomResource {
    /**
     * Get an existing VolumeAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeAttachmentState, opts?: pulumi.CustomResourceOptions): VolumeAttachment;
    /**
     * Returns true if the given object is an instance of VolumeAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is VolumeAttachment;
    /**
     * Automount the volume upon attaching it.
     */
    readonly automount: pulumi.Output<boolean>;
    /**
     * Server to attach the Volume to.
     */
    readonly serverId: pulumi.Output<number>;
    /**
     * ID of the Volume.
     */
    readonly volumeId: pulumi.Output<number>;
    /**
     * Create a VolumeAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeAttachmentArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering VolumeAttachment resources.
 */
export interface VolumeAttachmentState {
    /**
     * Automount the volume upon attaching it.
     */
    readonly automount?: pulumi.Input<boolean>;
    /**
     * Server to attach the Volume to.
     */
    readonly serverId?: pulumi.Input<number>;
    /**
     * ID of the Volume.
     */
    readonly volumeId?: pulumi.Input<number>;
}
/**
 * The set of arguments for constructing a VolumeAttachment resource.
 */
export interface VolumeAttachmentArgs {
    /**
     * Automount the volume upon attaching it.
     */
    readonly automount?: pulumi.Input<boolean>;
    /**
     * Server to attach the Volume to.
     */
    readonly serverId: pulumi.Input<number>;
    /**
     * ID of the Volume.
     */
    readonly volumeId: pulumi.Input<number>;
}
