import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
/**
 * Provides a Hetzner Cloud Firewall to represent a Firewall in the Hetzner Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const myfirewall = new hcloud.Firewall("myfirewall", {rules: [{
 *     direction: "in",
 *     protocol: "icmp",
 *     sourceIps: [
 *         "0.0.0.0/0",
 *         "::/0",
 *     ],
 * }]});
 * const node1 = new hcloud.Server("node1", {
 *     image: "debian-9",
 *     serverType: "cx11",
 *     firewallIds: [myfirewall.id],
 * });
 * ```
 *
 * ## Import
 *
 * Firewalls can be imported using its `id`
 *
 * ```sh
 *  $ pulumi import hcloud:index/firewall:Firewall myfw <id>
 * ```
 */
export declare class Firewall extends pulumi.CustomResource {
    /**
     * Get an existing Firewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallState, opts?: pulumi.CustomResourceOptions): Firewall;
    /**
     * Returns true if the given object is an instance of Firewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Firewall;
    /**
     * User-defined labels (key-value pairs) should be created with.
     */
    readonly labels: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * Name of the Firewall.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Configuration of a Rule from this Firewall.
     */
    readonly rules: pulumi.Output<outputs.FirewallRule[] | undefined>;
    /**
     * Create a Firewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirewallArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Firewall resources.
 */
export interface FirewallState {
    /**
     * User-defined labels (key-value pairs) should be created with.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Name of the Firewall.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Configuration of a Rule from this Firewall.
     */
    readonly rules?: pulumi.Input<pulumi.Input<inputs.FirewallRule>[]>;
}
/**
 * The set of arguments for constructing a Firewall resource.
 */
export interface FirewallArgs {
    /**
     * User-defined labels (key-value pairs) should be created with.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Name of the Firewall.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Configuration of a Rule from this Firewall.
     */
    readonly rules?: pulumi.Input<pulumi.Input<inputs.FirewallRule>[]>;
}
