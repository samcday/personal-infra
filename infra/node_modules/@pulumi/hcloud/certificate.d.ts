import * as pulumi from "@pulumi/pulumi";
/**
 * Alias for `hcloud.UploadedCertificate` to remain backwards compatible.
 * Deprecated.
 */
export declare class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate;
    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Certificate;
    readonly certificate: pulumi.Output<string>;
    readonly created: pulumi.Output<string>;
    readonly domainNames: pulumi.Output<string[]>;
    readonly fingerprint: pulumi.Output<string>;
    readonly labels: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    readonly name: pulumi.Output<string>;
    readonly notValidAfter: pulumi.Output<string>;
    readonly notValidBefore: pulumi.Output<string>;
    readonly privateKey: pulumi.Output<string>;
    readonly type: pulumi.Output<string>;
    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    readonly certificate?: pulumi.Input<string>;
    readonly created?: pulumi.Input<string>;
    readonly domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly fingerprint?: pulumi.Input<string>;
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    readonly name?: pulumi.Input<string>;
    readonly notValidAfter?: pulumi.Input<string>;
    readonly notValidBefore?: pulumi.Input<string>;
    readonly privateKey?: pulumi.Input<string>;
    readonly type?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    readonly certificate: pulumi.Input<string>;
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    readonly name?: pulumi.Input<string>;
    readonly privateKey: pulumi.Input<string>;
}
